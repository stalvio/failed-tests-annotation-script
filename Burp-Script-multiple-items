from burp import IBurpExtender
from burp import IHttpListener
import json
import random

class BurpExtender(IBurpExtender, IHttpListener):
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("JSON Response and Request Modifier")
        callbacks.registerHttpListener(self)
        print("JSON Response and Request Modifier Extension Loaded")
        return

    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
        # Define hard-coded lists for dNames and sNames
        dNamesList = [
            "Alpha", "Beta", "Gamma", "Delta", "Epsilon",
            "Zeta", "Eta", "Theta", "Iota", "Kappa",
            "Lambda", "Mu", "Nu", "Xi", "Omicron",
            "Pi", "Rho", "Sigma", "Tau", "Upsilon"
        ]
        sNamesList = [
            "Apple", "Banana", "Cherry", "Date", "Elderberry",
            "Fig", "Grape", "Honeydew", "Imbe", "Jackfruit",
            "Kiwi", "Lemon", "Mango", "Nectarine", "Orange",
            "Papaya", "Quince", "Raspberry", "Strawberry", "Tangerine"
        ]

        # Process requests
        if messageIsRequest:
            # Get the HTTP service and request info
            httpService = messageInfo.getHttpService()
            request = messageInfo.getRequest()
            requestInfo = self._helpers.analyzeRequest(httpService, request)
            url = requestInfo.getUrl()

            # Check if the request is to endpoint3
            if url.getPath().endswith("/endpoint3"):
                try:
                    # Parse the request body
                    body_offset = requestInfo.getBodyOffset()
                    body_bytes = request[body_offset:]
                    body_str = self._helpers.bytesToString(body_bytes)
                    json_data = json.loads(body_str)
                    modified = False

                    # Process dNames
                    if "dNames" in json_data and len(json_data["dNames"]) == 1:
                        try:
                            num_names = int(json_data["dNames"][0])
                            if num_names > len(dNamesList):
                                print("Warning: Requested {} dNames, but dNamesList has only {}. Using all available names.".format(num_names, len(dNamesList)))
                                num_names = len(dNamesList)
                            if num_names < 0:
                                print("Warning: Negative number of dNames requested. Ignoring modification.")
                            else:
                                selected_names = random.sample(dNamesList, num_names)
                                json_data["dNames"] = selected_names
                                modified = True
                                print("Modified dNames with {} random names".format(num_names))
                        except ValueError:
                            print("Error: dNames contains non-numeric value: {}".format(json_data["dNames"][0]))

                    # Process sNames
                    if "sNames" in json_data and len(json_data["sNames"]) == 1:
                        try:
                            num_names = int(json_data["sNames"][0])
                            if num_names > len(sNamesList):
                                print("Warning: Requested {} sNames, but sNamesList has only {}. Using all available names.".format(num_names, len(sNamesList)))
                                num_names = len(sNamesList)
                            if num_names < 0:
                                print("Warning: Negative number of sNames requested. Ignoring modification.")
                            else:
                                selected_names = random.sample(sNamesList, num_names)
                                json_data["sNames"] = selected_names
                                modified = True
                                print("Modified sNames with {} random names".format(num_names))
                        except ValueError:
                            print("Error: sNames contains non-numeric value: {}".format(json_data["sNames"][0]))

                    # If modifications were made, update the request
                    if modified:
                        # Convert back to JSON string
                        modified_body = json.dumps(json_data)
                        modified_body_bytes = self._helpers.stringToBytes(modified_body)

                        # Update Content-Length header
                        headers = requestInfo.getHeaders()
                        new_headers = []
                        for header in headers:
                            if not header.lower().startswith("content-length:"):
                                new_headers.append(header)
                        new_headers.append("Content-Length: " + str(len(modified_body_bytes)))

                        # Build new request
                        new_request = self._helpers.buildHttpMessage(new_headers, modified_body_bytes)
                        messageInfo.setRequest(new_request)
                        print("Modified request for endpoint3")

                except Exception as e:
                    print("Error processing request: " + str(e))

        # Process responses (for endpoint1 and endpoint2)
        else:
            # Get the HTTP service and response info
            httpService = messageInfo.getHttpService()
            response = messageInfo.getResponse()
            if response is None:
                return

            # Parse the response
            responseInfo = self._helpers.analyzeResponse(response)
            headers = responseInfo.getHeaders()
            body_offset = responseInfo.getBodyOffset()
            body_bytes = response[body_offset:]

            # Get the request to check the endpoint
            request = messageInfo.getRequest()
            requestInfo = self._helpers.analyzeRequest(httpService, request)
            url = requestInfo.getUrl()

            # Check if the response is from endpoint1 or endpoint2
            if url.getPath().endswith("/endpoint1") or url.getPath().endswith("/endpoint2"):
                try:
                    # Convert body to string
                    body_str = self._helpers.bytesToString(body_bytes)
                    # Parse JSON
                    json_data = json.loads(body_str)

                    # Check if jsonArray exists
                    if "jsonArray" in json_data:
                        # New arrays to append
                        new_arrays = [
                            ["4", "4", "4", "4", "4"],
                            ["5", "5", "5", "5", "5"],
                            ["6", "6", "6", "6", "6"],
                            ["7", "7", "7", "7", "7"],
                            ["8", "8", "8", "8", "8"],
                            ["9", "9", "9", "9", "9"]
                        ]

                        # Append new arrays to jsonArray
                        json_data["jsonArray"].extend(new_arrays)

                        # Convert back to JSON string
                        modified_body = json.dumps(json_data)
                        modified_body_bytes = self._helpers.stringToBytes(modified_body)

                        # Update Content-Length header
                        new_headers = []
                        for header in headers:
                            if not header.lower().startswith("content-length:"):
                                new_headers.append(header)
                        new_headers.append("Content-Length: " + str(len(modified_body_bytes)))

                        # Build new response
                        new_response = self._helpers.buildHttpMessage(new_headers, modified_body_bytes)
                        messageInfo.setResponse(new_response)
                        print("Modified JSON response for " + url.getPath())

                except Exception as e:
                    print("Error processing response: " + str(e))
