def ctx = context(ctype: 'geb.spock.GebSpec')

contributor(ctx) {
    def pageClasses = findClass('geb.Page')?.subclasses ?: []
    pageClasses.each { pageClass ->
        def pageName = pageClass.simpleName
        // Add page instance method (e.g., to(MyPage))
        method name: "to${pageName}", type: pageName, params: [args: 'java.lang.Object[]'], doc: "Navigate to ${pageName}"

        // Add content definitions from the page's static content closure
        def content = pageClass.getDeclaredField('content')?.get(null) as Closure
        if (content) {
            content.delegate = new Object()
            content.resolveStrategy = Closure.DELEGATE_FIRST
            content.call()
            def contentMethods = content.delegate.properties?.keySet() ?: []
            contentMethods.each { methodName ->
                method name: methodName, type: 'geb.PageElement', params: [:], doc: "Access the ${methodName} element"
            }
        }
    }

    // Add methods like 'at' for page verification
    method name: 'at', type: 'boolean', params: [page: 'geb.Page'], doc: 'Check if at the specified page'
}
